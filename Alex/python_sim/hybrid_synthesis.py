'''
this file will try to recreate the hybrid synthesis module and
manufacture the relevant lookup tables for the FPGA
'''
import numpy as np

imdctWinData = np.zeros(shape=(4,36), dtype=np.float32)

#### BT = 0
for i in range(36):
    imdctWinData[0][i] = np.sin(np.pi / 36 * (i + 0.5))


#####BT = 1
for i in range(18):
    imdctWinData[1][i] = np.sin(np.pi / 36 * (i + 0.5))

for i in range(18,24):
    imdctWinData[1][i] = 1

for i in range(24,30):
    imdctWinData[1][i] = np.sin(np.pi / 12 * (i + 0.5 - 18.0))

for i in range(30,36):
    imdctWinData[1][i] = 0.0


##### BT = 2
for i in range(12):
    imdctWinData[2][i] = np.sin(np.pi / 12 * (i + 0.5))

for i in range(12,36):
    imdctWinData[2][i] = 0.0



### BT = 3
for i in range(6):
    imdctWinData[3][i] = 0.0

for i in range(6,12):
    imdctWinData[3][i] = np.sin(np.pi / 12 * (i + 0.5 - 6.0))

for i in range(12,18):
    imdctWinData[3][i] = 1.0

for i in range(18,36):
    imdctWinData[3][i] = np.sin(np.pi / 36 * (i + 0.5))
#
#
# with open("imdctWin_tab.mem", 'w') as f:
#     for row in range(4):
#         word = ""
#         for col in range(36):
#             if (imdctWinData[row, 35-col] < 0):
#                 hex_num = hex((1 << 32) - int(2 ** 30 * np.abs(imdctWinData[row, 35-col])))[2:].zfill(8)
#             else:
#                 hex_num = hex(int(imdctWinData[row,35 - col] * 2 ** 30))[2:].zfill(8)     #the order of the words is reversed to help with the verilog implementation
#             word += hex_num
#
#         f.write(word + "\n")
#
# print("done")



### MAKE THE COSINE TABLES:
# func init() {
# 	const N = 36
# 	for i := 0; i < 18; i++ {
# 		for j := 0; j < 36; j++ {
# 			cosN36[i][j] = float32(math.Cos(math.Pi / (2 * N) * (2*float64(j) + 1 + N/2) * (2*float64(i) + 1)))
# 		}
# 	}
# }

cosN36 = np.zeros(shape=(18,36), dtype=np.float32)
N = 36
for i in range(18):
    for j in range(36):
        cosN36[i,j] = np.cos(np.pi / (2 * N) * (2 * j + 1 + N/2) * (2 * i + 1))

## save it into a bram
## FORMAT:
### 144 bytes (1152 bits) width for each entry, and 18 entries.

# with open("cosN36_tab.mem", 'w') as f:
#     for row in range(18):
#         word = ""
#         for col in range(36):
#             if (cosN36[row, 35-col] < 0):
#                 hex_num = hex((1 << 32) - int(2 ** 30 * np.abs(cosN36[row, 35-col])))[2:].zfill(8)
#             else:
#                 hex_num = hex(int(cosN36[row,35 - col] * 2 ** 30))[2:].zfill(8)     #the order of the words is reversed to help with the verilog implementation
#             word += hex_num
#
#         f.write(word + "\n")
#
# print("done")


# a = 0.455
# print(hex(int(2 ** 30 * a))[2:].zfill(8))
# OUT = []
# b = a * cosN36[0,0,]
# print(b)



##### DETERMINE LINEAR COEFFICIENTS OF BT == 2:
cosN12 = np.zeros(shape = (6,12), dtype=np.float32)
N = 12
for i in range(6):
    for j in range(12):
        cosN12[i,j] = np.cos(np.pi / (2 * N) * (2 * j + 1 + N/2) * (2 * i + 1))

iwd = imdctWinData[2]
coeffs = np.zeros(shape = (36,18), dtype=np.float32)

for i in range(3):
    for p in range(N):
        for m in range(6):
            coeffs[6 * i + p + 6, i + 3 * m] += cosN12[m,p] * imdctWinData[2][p]
#
#

### write these into a mem file!
with open("bt_2_hybrid_synth_coeffs.mem", 'w') as f:
    for i in range(18):
        word = ""
        for num in list(coeffs[:,i])[::-1]:
            if (num < 0):
                hex_num = hex((1 << 32) - int(2 ** 30 * np.abs(num)))[2:].zfill(8)
            else:
                hex_num = hex(int(num * 2 ** 30))[2:].zfill(8)     #the order of the words is reversed to help with the verilog implementation
            word += hex_num

        f.write(word + "\n")

print("DONE!")

####### MAKE A TESTING CASE ################
# go_lib_input = "0.0014938836 0.00087001827 0 -0.00087001827 -0.0021923087 -0.0029519913 -0.0037643504 -0.0037643504 -0.0037643504 -0.0037643504 -0.0029487517 -0.002179734 -0.001478486 -0.0008334656 -0.00027669762 -0.00021967682 0.00010597904 0.00015155692 0.00092367304 0.0009300051 0.00043607428 0.00040231476 0.0004260006 0.00040617574 0.000901059 0.0008809346 0.00087001827 0.00087001827 0.00087323127 0.00088228384 0.00090492953 0.0010074014 0.00061126304 0.0007960243 0.00040027624 0.00015155692 0.00092367304 0.0014800935 0.0013104364 0.0014061496 0.001404907 0.00083364715 0.000857577 0.00086679315 0.00087001827 0.00034526698 0.0003420455 -1.2353389e-05 -1.4144207e-05 -3.265328e-05 0 -0.00021967682 -0.00014156292 0.00015155692 0.00092367304 0.00046730987 0.00043607428 0 -0.0003437195 -0.0003449773 -0.00086993043 -0.0008712897 -0.00087001827 -0.00087001827 -0.00086679315 -0.000857577 -0.00083364715 -0.0002614384 -0.00018123856 -5.5231852e-05 0.00010597904 0.00015155692 0.00092367304 0.0009300051 0.0009343933 0.0009183106 0.00089877215 0.00090492953 0.00088228384 0.00087323127 0.00034526698 0.00034526698 0.00034526456 0.0003452321 0.0003449773 0.00031106622 0.00027669762 0.00021967682 0.00014156292 0.00011842552 -0.0004737025 -0.00046730987 -0.00043607428 -0.00040231476 -0.00037637277 -1.4144207e-05 -4.9024457e-06 -1.2774879e-06 0 0 0 -4.9024457e-06 0.0003308331 0.0002614384 6.774935e-05 0.00035804586 6.2418985e-05 -2.2562628e-05 -0.0017286155 -0.0017276354 -0.0016912788 -0.0015317666 -0.00089877215 -0.0003591215 -0.0003452321 0 0.00034526698 0.00087001827 0.00087323127 0.00088228384 0.00090492953 0.0009484 0.0004977738 0.00060051924 0.00041041544 0.00015155692 0.00092367304 0.0007671316 0.00071799586 0.00079269346 0.00078383775 0.00083364715 0.000857577 0.00086679315 0.00087001827 0.00087001827 0.0008712897 0.00087483285 0.00088343257 0.00089877215 0.00040231476 0.00043607428 0.00016287348 0.00017763849 0.000296064 0.0003044364 0.00021967682 0.00027669762 0.0002614384 0.00030933614 0.00033287873 0.0003420455 0.00034526698 0.00034526698 0 0 0 0 0 -0.00032787555 -0.0003044364 0.00017763849 0.000296064 0.00016287348 0.00010819873 0 0 0 0 0 0 0 0 0 1.4144207e-05 3.265328e-05 6.2808555e-05 0.00010819873 0.00016287348 -0.00011842552 0.0004737025 0.0003044364 0.00032787555 0.0003395062 0.0003437195 0.0003449773 0 0 0 -0.00034526698 -0.00034398708 -0.00034032966 -0.0003308331 -0.00031106622 -0.00027669762 -0.00021967682 -0.00014156292 -0.00011842552 0.0004737025 0.00046730987 0.00043607428 0.00040231476 0.00037637277 0.0003591215 0.00035013456 0.00034654205 0.00034526698 0 0 -4.9024457e-06 -1.4144207e-05 -3.265328e-05 -6.2808555e-05 -0.00010819873 0.00014156292 -0.00017763849 -0.000296064 -0.00046730987 -0.00032787555 -0.0003395062 -0.0003437195 -0.0003449773 -0.0003452321 0 0 0 1.2774879e-06 0.00035013456 0.0003591215 0.00037637277 0.00040231476 0.00010819873 0.00016287348 0.00017763849 0.000296064 0.0003044364 0.00032787555 0.00027669762 0.00031106622 0.0003308331 0.00034032966 0.00034526456 0.00034526698 0.00034526698 0.00034398708 0.00034032966 0.0003308331 0.00031106622 0.00027669762 0.00021967682 0.00014156292 0.00011842552 -0.0004737025 -0.00046730987 -0.00043607428 -0.00040231476 -0.00037637277 -0.0003591215 -0.00035013456 -0.00034654205 -0.00034526698 -0.00034526698 -0.00034398708 -0.00034032966 -0.0003308331 -0.00031106622 -0.00027669762 -0.00021967682 -0.00014156292 -0.00011842552 0.0004737025 0.00046730987 0.00043607428 0.00040231476 0.00037637277 0.0003591215 0.00035013456 0.00034654205 0 0 -1.2774879e-06 -4.9024457e-06 -1.4144207e-05 0 0 0 0 0 0 0 0 0 0 -0.0003449773 -0.0003452321 -0.00034526456 -0.00034526698 -0.00034526698 -0.00034526456 -0.0003452321 -0.0003449773 -0.0003437195 0 0 0.00016287348 0.00017763849 0.000296064 0.0003044364 0 0 3.265328e-05 1.4144207e-05 4.9024457e-06 1.2774879e-06 0 0 0 0 0 0 0 0 -0.00016287348 -0.00017763849 -0.000296064 -0.0003044364 0 0 0 0 0 0 0 0.00034526698 0.00034654205 0.00035013456 0.0003591215 0 0 0 0 0 0 0 0 0 0 0.0003308331 0.00034032966 0.00034398708 0.00034526698 0.00034526698 0.00034398708 0.00034032966 0.0003308331 0.00031106622 0.00027669762 0.00021967682 0.00014156292 0.00011842552 -0.0004737025 -0.00046730987 -0.00043607428 -0.00040231476 -0.00037637277 -0.0003591215 -0.00035013456 -0.00034654205 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6.2808555e-05 0.00010819873 0.00016287348 0.00017763849 0.000296064 0.0003044364 0.00032787555 0.0003395062 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
# #
#
# #this second one is the gr=1 input...
# vals = []
# for item in go_lib_input.split(" "):
#     vals.append(eval(item))

# code = ""
# for item in vals:
#     if item < 0:
#         hex_num = hex((1<<32) - int(np.abs(item) * 2 ** 30))[2:].zfill(8)
#     else:
#         hex_num = hex(int(item * 2 ** 30))[2:].zfill(8)
#
#     code += hex_num
#
# print(code)


# STORE = np.zeros(shape=(32,18),dtype=np.float32)
#
# #### VERIFICATION:
# for sb in range(32):
#     IN = vals[18 * sb : 18 * (sb + 1)]
#
#     OUT = np.zeros(shape=(36,), dtype=np.float32)
#     for p in range(36):
#         sum = 0
#         for m in range(18):
#             sum += IN[m] * cosN36[m,p]
#         OUT[p] = sum * imdctWinData[1][p]
#     STORE[sb] = OUT[18:]
#
# # print(STORE)
#
#
#
# go_lib_input = "0.3254564 0.053015966 -0.28172848 0.075219624 -0.032951165 -0.049511354 -0.02985093 -0.049511354 -0.053015966 -0.0062007853 -0.0062007853 0.008349492 0.011416015 0.0091409935 0.0074627325 0.012203194 0.0012303916 0.0132539915 -0.005975534 0.0091409935 -0.01596898 -0.0050009685 -0.011945206 -0.0045704967 -0.004174746 -0.00034526698 -0.0078124995 0.004174746 -0.0074385516 0.00211267 0.0031003926 -0.0046233037 0.00211267 -0.011945206 -0.0074385516 0.004174746 -0.002460783 -0.00069053395 -0.00422534 0.010647191 -0.0059039826 -0.0210394 0.013076677 0.0017400365 0.00097656244 -0.00422534 0.007528701 0.010647191 -0.00097656244 0.009246607 0.009246607 0 0.007528701 0.00069053395 0.00422534 0.002987767 0.016893072 -0.0210394 0.0059039826 0.0043846173 -0.002460783 0 -0.0017400365 0.0062007853 0.0017400365 -0.0059039826 -0.002987767 -0.00069053395 -0.002987767 -0.002987767 0.0059039826 0.0043846173 -0.002987767 -0.0017400365 -0.0017400365 -0.00069053395 0.0017400365 0.002987767 0.007528701 0.00069053395 0.0017400365 -0.00069053395 0 -0.007528701 0.00069053395 0 0.002987767 -0.002987767 0.0059039826 -0.00069053395 -0.00422534 0.0043846173 -0.0031003926 0.00422534 0.002987767 0.0065383385 -0.002460783 0.002987767 0.0031003926 0.002460783 -0.009246607 -0.00048828122 -0.002460783 -0.00069053395 -0.0012303916 0.00422534 -0.00069053395 -0.0012303916 -0.00097656244 -0.0017400365 -0.00211267 0.0062007853 0.0017400365 -0.00048828122 -0.008349492 -0.002987767 -0.0031003926 0.00422534 -0.0017400365 -0.0012303916 0.0043846173 0.002987767 -0.0017400365 -0.009246607 0.00069053395 0.0017400365 -0.009246607 -0.0043846173 0.002987767 0.0059039826 -0.0017400365 0.002987767 0.0043846173 0 0.00069053395 0.0017400365 0.0017400365 0.002987767 0.002987767 0.0017400365 -0.0043846173 -0.0059039826 -0.002987767 -0.002987767 -0.0017400365 -0.0043846173 0.00069053395 0.00069053395 0 0 0.0017400365 -0.0017400365 -0.00069053395 -0.0043846173 0.0017400365 0.0017400365 0.00097656244 -0.002460783 -0.00422534 0.00097656244 0 0.002460783 0 -0.00097656244 0.00097656244 -0.002460783 0.002460783 0.002460783 0.00097656244 -0.002460783 0.00097656244 0.00422534 0.00097656244 0.002460783 0.00097656244 0.00422534 -0.00422534 0 -0.002460783 0 -0.0062007853 0.00422534 -0.002460783 -0.0062007853 -0.00422534 -0.002460783 0.00422534 0 -0.00097656244 -0.00097656244 -0.00097656244 -0.00097656244 0.0062007853 -0.00422534 0.0062007853 0.00422534 0.002460783 -0.00422534 0.00097656244 0.00422534 0.0059039826 -0.002460783 0.0062007853 -0.002987767 -0.00097656244 -0.00422534 -0.0043846173 0 0.002460783 0.0017400365 0.002460783 -0.00097656244 -0.002987767 0.00097656244 0 0 0.00422534 0 -0.002987767 -0.00097656244 0.00097656244 -0.0017400365 -0.00422534 0.002460783 -0.0017400365 0.002460783 0.002460783 0.0017400365 -0.00097656244 0 -0.0017400365 -0.00422534 0 0.00069053395 -0.002460783 -0.00097656244 0 0.00097656244 0.00097656244 0 -0.00097656244 -0.002460783 0.002987767 0.00097656244 0.00422534 0.0017400365 -0.00097656244 0 0.0017400365 -0.00097656244 0.00097656244 0 0.002460783 0.00069053395 0 -0.002460783 -0.00069053395 0.00097656244 -0.00422534 0.002987767 -0.00097656244 -0.00097656244 -0.002987767 -0.002460783 0.002460783 0.00069053395 0 0.002460783 0.0017400365 0.0062007853 0.00097656244 0.0017400365 -0.00097656244 0.00097656244 0.0017400365 -0.00097656244 0.00422534 0 0 0.00097656244 0.00069053395 -0.00097656244 0 -0.00069053395 0.00097656244 0 0.002987767 -0.00097656244 0 0 0 0 0.0043846173 0.00097656244 0 0.0017400365 0.00097656244 -0.00097656244 0 0.002460783 -0.002460783 0.0017400365 -0.002460783 0 -0.00069053395 -0.00097656244 0 0.00069053395 0 -0.002460783 -0.00069053395 0 0 0 0 -0.00097656244 -0.0017400365 0.00097656244 -0.00069053395 -0.00069053395 -0.0012303916 -0.00069053395 0 0.00048828122 0 0 0 0.0017400365 0 0.0012303916 -0.00069053395 0.00069053395 0 0.0017400365 -0.00069053395 -0.00048828122 0.0017400365 0 -0.00048828122 -0.0017400365 -0.00069053395 -0.0012303916 0.00069053395 0 0.0012303916 0.00069053395 0.00069053395 0 -0.0017400365 0.00069053395 0 -0.00069053395 0.00069053395 0.0012303916 0 0.0017400365 0.0012303916 0 -0.00069053395 0 0.00069053395 0 0.00048828122 0.0017400365 0.00069053395 0 -0.00069053395 0 0.00048828122 0.00069053395 -0.00069053395 0 0 0 -0.0012303916 0.00069053395 0.00069053395 0 0.0017400365 0.00069053395 0 -0.00069053395 0 0 0.0017400365 0.00069053395 -0.00048828122 0 0 -0.00048828122 0 0 -0.00048828122 0 0.00069053395 -0.0012303916 0.00069053395 0.00069053395 0.00048828122 0 -0.00069053395 0 0.0017400365 -0.00069053395 -0.0012303916 0 0 0.00048828122 0 0 0 -0.00097656244 0 -0.00097656244 0.00097656244 -0.00097656244 0 -0.00097656244 0 0.00097656244 0 -0.00097656244 0.00097656244 0 -0.00097656244 0.00097656244 0 -0.00097656244 0 -0.00097656244 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
# vals = []
# for item in go_lib_input.split(" "):
#     vals.append(eval(item))
#
# print("SECOND GR:")
# for sb in range(32):
#     IN = vals[18*sb : 18 * (sb + 1)]
#     OUT = np.zeros(shape=(36,))
#
#     for i in range(36):
#         OUT[i] = np.sum(coeffs[i] * IN)
#
#     OUT[0:18] += STORE[sb]
#
#     print(list(OUT[0:18].flatten()))
#
# N  = 12
# for sb in range(32):
#     IN = vals[18*sb : 18 * (sb + 1)]
#     OUT = np.zeros(shape=(36,))
#     for i in range(3):
#         for p in range(N):
#             sum = 0
#             for m in range(int(N/2)):
#                 sum += IN[i+3*m] * cosN12[m,p]
#             OUT[6*i + 6 + p] += sum# * imdctWinData[2][p]
#     OUT[:18] += STORE[sb]
#
#     print(list(OUT[:18]))
